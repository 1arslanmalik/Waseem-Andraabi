const h="modulepreload",g=function(e){return"/"+e},m={},$=function(t,r,s){let a=Promise.resolve();if(r&&r.length>0){document.getElementsByTagName("link");const i=document.querySelector("meta[property=csp-nonce]"),n=i?.nonce||i?.getAttribute("nonce");a=Promise.all(r.map(o=>{if(o=g(o),o in m)return;m[o]=!0;const l=o.endsWith(".css"),d=l?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${o}"]${d}`))return;const c=document.createElement("link");if(c.rel=l?"stylesheet":h,l||(c.as="script",c.crossOrigin=""),c.href=o,n&&c.setAttribute("nonce",n),document.head.appendChild(c),l)return new Promise((u,f)=>{c.addEventListener("load",u),c.addEventListener("error",()=>f(new Error(`Unable to preload CSS for ${o}`)))})}))}return a.then(()=>t()).catch(i=>{const n=new Event("vite:preloadError",{cancelable:!0});if(n.payload=i,window.dispatchEvent(n),!n.defaultPrevented)throw i})};function w(e){return e[0]==="/"?e:"/"+e}function p(e){return e.endsWith("/")?e.slice(0,e.length-1):e}function b(e){return/^(?:http|ftp|https|ws):?\/\//.test(e)||e.startsWith("data:")}function N(e,t){return e.startsWith(t)?e.slice(p(t).length):e}const C=["jpeg","jpg","png","tiff","webp","gif","svg","avif"],E={name:"MissingMediaQueryDirective",title:"Missing value for `client:media` directive.",message:'Media query not provided for `client:media` directive. A media query similar to `client:media="(max-width: 600px)"` must be provided'},A={name:"NoMatchingRenderer",title:"No matching renderer found.",message:(e,t,r,s)=>`Unable to render \`${e}\`.

${s>0?`There ${r?"are":"is"} ${s} renderer${r?"s":""} configured in your \`astro.config.mjs\` file,
but ${r?"none were":"it was not"} able to server-side render \`${e}\`.`:`No valid renderer was found ${t?`for the \`.${t}\` file extension.`:"for this file extension."}`}`,hint:e=>`Did you mean to enable the ${e} integration?

See https://docs.astro.build/en/guides/framework-components/ for more information on how to install and configure integrations.`},M={name:"NoClientEntrypoint",title:"No client entrypoint specified in renderer.",message:(e,t,r)=>`\`${e}\` component has a \`client:${t}\` directive, but no client entrypoint was provided by \`${r}\`.`,hint:"See https://docs.astro.build/en/reference/integrations-reference/#addrenderer-option for more information on how to configure your renderer."},k={name:"NoClientOnlyHint",title:"Missing hint on client:only directive.",message:e=>`Unable to render \`${e}\`. When using the \`client:only\` hydration strategy, Astro needs a hint to use the correct renderer.`,hint:e=>`Did you mean to pass \`client:only="${e}"\`? See https://docs.astro.build/en/reference/directives-reference/#clientonly for more information on client:only`},S={name:"NoMatchingImport",title:"No import found for component.",message:e=>`Could not render \`${e}\`. No matching import has been found for \`${e}\`.`,hint:"Please make sure the component is properly imported."},U={name:"InvalidComponentArgs",title:"Invalid component arguments.",message:e=>`Invalid arguments passed to${e?` <${e}>`:""} component.`,hint:"Astro components cannot be rendered directly via function call, such as `Component()` or `{items.map(Component)}`."},I={name:"UnknownContentCollectionError",title:"Unknown Content Collection Error."};function y(e){return e.replace(/\r\n|\r(?!\n)|\n/g,`
`)}function v(e,t){if(!t||t.line===void 0||t.column===void 0)return"";const r=y(e).split(`
`).map(n=>n.replace(/\t/g,"  ")),s=[];for(let n=-2;n<=2;n++)r[t.line+n]&&s.push(t.line+n);let a=0;for(const n of s){let o=`> ${n}`;o.length>a&&(a=o.length)}let i="";for(const n of s){const o=n===t.line-1;i+=o?"> ":"  ",i+=`${n+1} | ${r[n]}
`,o&&(i+=`${Array.from({length:a}).join(" ")}  | ${Array.from({length:t.column}).join(" ")}^
`)}return i}class L extends Error{loc;title;hint;frame;type="AstroError";constructor(t,r){const{name:s,title:a,message:i,stack:n,location:o,hint:l,frame:d}=t;super(i,r),this.title=a,this.name=s,i&&(this.message=i),this.stack=n||this.stack,this.loc=o,this.hint=l,this.frame=d}setLocation(t){this.loc=t}setName(t){this.name=t}setMessage(t){this.message=t}setHint(t){this.hint=t}setFrame(t,r){this.frame=v(t,r)}static is(t){return t.type==="AstroError"}}export{L as A,U as I,E as M,S as N,I as U,C as V,$ as _,A as a,k as b,M as c,b as i,w as p,N as r};
